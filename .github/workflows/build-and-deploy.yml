name: "Build and Release Godot-QuickStart"

# Trigger on version tags and manual dispatch
on:
  push:
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
    branches:
      - main # Also build on main branch pushes
  pull_request:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  GODOT_VERSION: "4.4.1"
  GODOT_EXPORT_VERSION: "4.4-stable"
  GAME_NAME: "Godot-QuickStart"

jobs:
  # Validation job - runs first to catch issues early
  validate:
    runs-on: ubuntu-latest
    name: "üîç Validate Project"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup Godot
        uses: chickensoft-games/setup-godot@v2
        with:
          version: ${{ env.GODOT_VERSION }}
          use-dotnet: false

      - name: Verify project structure
        run: |
          echo "üîç Checking project structure..."

          if [ ! -f "project.godot" ]; then
            echo "‚ùå project.godot not found!"
            exit 1
          fi

          if [ ! -d "scenes" ]; then
            echo "‚ùå scenes directory not found!"
            exit 1
          fi

          if [ ! -d "scripts" ]; then
            echo "‚ùå scripts directory not found!"
            exit 1
          fi

          echo "‚úÖ Project structure is valid"

      - name: Import and validate project
        run: |
          echo "üì¶ Importing project..."
          timeout 120 godot --headless --verbose --editor --quit-after 5 --path . || echo "‚ö†Ô∏è Import completed"

          echo "üîç Validating GDScript files..."
          find . -name "*.gd" -not -path "./.godot/*" | while read -r script; do
            echo "Checking $script..."
            godot --headless --check-only --script "$script" --path . || exit 1
          done

          echo "‚úÖ Validation completed"

  # Build job - runs after validation
  build_game:
    runs-on: ubuntu-latest
    name: "üèóÔ∏è Build Game"
    needs: validate
    steps:
      # Always include the checkout step so that
      # your project is available for Godot to export
    - name: Checkout
      uses: actions/checkout@v4
      with:
        lfs: true

    - name: Install Wine
      id: wine_install
      run: |
        sudo apt-get update
        sudo apt-get install -y wine64
        echo "WINE_PATH=$(which wine64)" >> $GITHUB_OUTPUT

    - name: Export Game
      id: export
      # Use latest version (see releases for all versions)
      uses: firebelley/godot-export@v6.0.0
      with:
        # Defining all the required inputs
        godot_executable_download_url: https://github.com/godotengine/godot/releases/download/${{ env.GODOT_EXPORT_VERSION }}/Godot_v${{ env.GODOT_EXPORT_VERSION }}_linux.x86_64.zip
        godot_export_templates_download_url: https://github.com/godotengine/godot/releases/download/${{ env.GODOT_EXPORT_VERSION }}/Godot_v${{ env.GODOT_EXPORT_VERSION }}_export_templates.tpz
        relative_project_path: ./ # Project is in root directory
        cache: true
        export_debug: false
        archive_output: true
        wine_path: ${{ steps.wine_install.outputs.WINE_PATH }}

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.GAME_NAME }}-builds-${{ github.sha }}
        path: ${{ steps.export.outputs.archive_directory }}/*
        retention-days: 30

  # Release job - only runs on version tags
  release_game:
    # Only run this job if it's a version tag push
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build_game # Wait for build to complete
    runs-on: ubuntu-latest
    permissions:
      contents: write # Need permissions for release creation
    name: "üì¶ Create Release"
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.GAME_NAME }}-builds-${{ github.sha }}
        path: ./builds

    - name: Create Release
      uses: ncipollo/release-action@v1.14.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        generateReleaseNotes: true
        tag: ${{ github.ref_name }}
        artifacts: ./builds/*
        name: "${{ env.GAME_NAME }} ${{ github.ref_name }}"
        body: |
          ## ${{ env.GAME_NAME }} Release ${{ github.ref_name }}

          üéÆ **Godot Quickstart Game** - Built automatically from GitHub Actions using Godot ${{ env.GODOT_EXPORT_VERSION }}

          ### üì• Downloads
          Download the appropriate build for your platform from the assets below:
          - **Windows**: `.exe` file
          - **Linux**: `.x86_64` file
          - **Web**: `.zip` file (extract and run locally or host on web server)

          ### üéØ How to Play
          - Player 1: W/S keys
          - Player 2: Arrow keys Up/Down
          - First to score wins!

          ### üîÑ Changes
          See the auto-generated release notes below for detailed changes.

  # Web deployment job - runs on main branch pushes
  deploy_web:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build_game
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    name: "üåê Deploy to GitHub Pages"
    steps:
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.GAME_NAME }}-builds-${{ github.sha }}
        path: ./builds

    - name: Extract Web Build
      run: |
        # Find and extract the web build
        find ./builds -name "*web*" -type f \( -name "*.zip" -o -name "*.tar.gz" \) -exec sh -c '
          for file; do
            echo "Extracting web build: $file"
            mkdir -p ./web-build
            case "$file" in
              *.zip) unzip -q "$file" -d ./web-build ;;
              *.tar.gz) tar -xzf "$file" -C ./web-build ;;
            esac
          done
        ' _ {} +

        # List contents for debugging
        echo "Web build contents:"
        find ./web-build -type f

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./web-build

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
